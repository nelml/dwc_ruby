# dwcにて学んだものの一覧

puts "aa"
#文字列aaを出力する。

puts 5
#数字の5を出力。

puts 5 + 3
#数字の演算を行い、その結果を出力する。

puts "5" + "3"
#文字列の足し算なので、"53"と表示される

puts "5".to_i + 3.to_s
#左辺は文字列を数字に変換、右辺は数字を文字列に変換。

puts "DOC".reverse
#文字列が逆から表示される

puts "webcampでプログラミング学習".include?("webcamp")
#特定の文字列が含めれているのかをtrue falseで返す。

puts "webcamp".swapcase
# 小文字⇔大文字変換

puts "webcamp".downcase
#大文字→小文字

puts "webcamp".upcase
#小文字を大文字に

puts "webamp".capitalize
#先頭の小文字を大文字に

#変数は小文字から始まるルールがある
#変数には　グローバル　ローカル　インスタンス　クラス　の種類がある

webcamp = "オンラインプログラミング学習"
puts webcamp
#変数webcmaoに文字列を追加し、それを出力する。

Pi = 3.14
#定数を定義する場合は頭文字は大文字で。基本変化させない数値を代入させる。

puts 101 % 25
#101を25で割った際の余りが表示される。この場合は1。これ以外は四則演算

name = "鈴木さん"
puts "こんにちは、#{name}"
#文字列に変数を代入する方法こんにちは、鈴木さん

names = ["Perl", "Ruby", "Python", "swift"]
puts names[1]
#配列。開始番号は0なので、この場合はRubyが出力される。

tall = {"太郎"=>185, "次郎"=>170, "花子"=>150}
puts tall["太郎"]
#ハッシュといい、キーと値を保存できるデータの集合。各要素に任意の値を割り振って、それを指定して要素が出力される。

tall = {:太郎=>185, :次郎=>170, :花子=>150}
puts tall[:太郎]
#シンボルは”や’の代わりにコロンを使用して文字列同様に扱うことができる

apple = 110
if apple >= 100
	puts "リンゴの値段は100円以上です"
end

if apple <= 100
	puts "リンゴの値段は100円以下です"
end
#if分の基礎。以上以下なので、100円の場合同時に表示される。イコールを除外すれば除外される。
#==　・・・右辺と左辺が等しいとき
#!=　・・・等しくないとき

#論理演算子・・・2つ以上の条件を判定する際に使用する。
# ! ・・・否定
#&& ・・・どちらも正しければtrue
#|| ・・・どちらか正しければtrue

elsif apple == 110
	puts "otoku"
#ifに付け足して条件分岐させることができる。
else
#何にも該当しないときにこれをつかって処理する

input_key = gets
puts "入力された内容は" + input_key
#getsを使うことで、入力待ちの状態にすることができる。
#getsでは”文字列として”入力されるため、数字を入力させる際には
puts.to_i
#.to_iを使って整数に変換する必要がある。
while dice != 6 do
	dice = dice + 1
end
#while文。
#while 変数　条件がこの時　do(以下を実行)となる。
rand(1..6)
#1~6のランダムな整数を選択する。
rand(100)
#0~100のランダムな整数を選択する。
1..2
#そもそもRubyの範囲指定の記載がこれらしい。

for i in 1..10 do
	puts 1
end
#for文。
#i が10になるまで整数1から入力し続けるというもの。

{apple => 130, "strawberry" => 180, "orange" => 100}.each do |fruit, price|
	puts "#{fruit}は#{price}円です。"
end
#each文。
#範囲・ハッシュ・配列を指定して、データの先頭からリスト順で処理が行われるというもの。
#使い道はよくわからんが、一覧表示とかするのに便利かもしれない？

if i > 5
	break
end
#while文など、繰り返し処理の中に挟むと、if内の条件に合致したときに処理のループから抜け出すようにできる。

